package com.shalako.checkers.api.dto;

import com.shalako.checkers.model.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.Instant;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * DTO for game state in API responses.
 */
@Data
@NoArgsConstructor
public class GameResponseDto {
    private String id;
    private BoardDto board;
    private PlayerDto redPlayer;
    private PlayerDto blackPlayer;
    private PlayerColor currentTurn;
    private GameState state;
    private Instant createdAt;
    private Instant updatedAt;
    private String currentPlayerName;
    private boolean isGameOver;

    /**
     * Creates a GameResponseDto from a Game entity.
     */
    public static GameResponseDto fromGame(Game game) {
        GameResponseDto dto = new GameResponseDto();
        dto.id = game.getId();
        dto.board = BoardDto.fromBoard(game.getBoard());
        dto.redPlayer = PlayerDto.fromPlayer(game.getRedPlayer());
        dto.blackPlayer = PlayerDto.fromPlayer(game.getBlackPlayer());
        dto.currentTurn = game.getCurrentTurn();
        dto.state = game.getState();
        dto.createdAt = game.getCreatedAt();
        dto.updatedAt = game.getUpdatedAt();
        dto.currentPlayerName = game.getCurrentPlayer().getName();
        dto.isGameOver = game.isGameOver();
        return dto;
    }

    // Getters and setters are generated by Lombok @Data

    /**
     * DTO for board state.
     */
    @Data
    @NoArgsConstructor
    public static class BoardDto {
        private BoardSize size;
        private Map<String, PieceDto> pieces;

        public static BoardDto fromBoard(Board board) {
            BoardDto dto = new BoardDto();
            dto.size = board.getSize();
            dto.pieces = board.getPieces().entrySet().stream()
                    .collect(Collectors.toMap(
                            entry -> entry.getKey().toString(),
                            entry -> PieceDto.fromPiece(entry.getValue())
                    ));
            return dto;
        }
    }

    /**
     * DTO for piece state.
     */
    @Data
    @NoArgsConstructor
    public static class PieceDto {
        private PlayerColor color;
        private PieceType type;

        public static PieceDto fromPiece(Piece piece) {
            PieceDto dto = new PieceDto();
            dto.color = piece.getColor();
            dto.type = piece.getType();
            return dto;
        }
    }

    /**
     * DTO for player state.
     */
    public static class PlayerDto {
        private String id;
        private String name;
        private PlayerColor color;
        private PlayerType type;

        public static PlayerDto fromPlayer(Player player) {
            PlayerDto dto = new PlayerDto();
            dto.id = player.getId();
            dto.name = player.getName();
            dto.color = player.getColor();
            dto.type = player.getType();
            return dto;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public PlayerColor getColor() {
            return color;
        }

        public void setColor(PlayerColor color) {
            this.color = color;
        }

        public PlayerType getType() {
            return type;
        }

        public void setType(PlayerType type) {
            this.type = type;
        }
    }
}
